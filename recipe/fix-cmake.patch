diff --git a/setup.py b/setup.py
index 05d885b..defaf58 100644
--- a/setup.py
+++ b/setup.py
@@ -38,7 +38,7 @@ class CMakeBuild(build_ext):
     def build_extension(self, ext):
         import sysconfig
 
-        import torch
+        # import torch
 
         extdir = os.path.abspath(osp.dirname(self.get_ext_fullpath(ext.name)))
         self.build_type = "DEBUG" if self.debug else "RELEASE"
@@ -51,8 +51,11 @@ class CMakeBuild(build_ext):
         if not osp.exists(self.build_temp):
             os.makedirs(self.build_temp)
 
-        WITH_CUDA = torch.cuda.is_available()
-        WITH_CUDA = bool(int(os.getenv('FORCE_CUDA', WITH_CUDA)))
+        # NOTE: calling torch would require having torch installer
+        # in the build environment which is incompatible for cross
+        # compiled builds (`osx-arm64`).
+        # WITH_CUDA = torch.cuda.is_available()
+        WITH_CUDA = bool(int(os.getenv('FORCE_CUDA', False)))
 
         cmake_args = [
             '-DBUILD_TEST=OFF',
@@ -61,7 +64,7 @@ class CMakeBuild(build_ext):
             f'-DWITH_CUDA={"ON" if WITH_CUDA else "OFF"}',
             f'-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}',
             f'-DCMAKE_BUILD_TYPE={self.build_type}',
-            f'-DCMAKE_PREFIX_PATH={torch.utils.cmake_prefix_path}',
+            # f'-DCMAKE_PREFIX_PATH={torch.utils.cmake_prefix_path}',
         ]
 
         if CMakeBuild.check_env_flag('USE_MKL_BLAS'):
@@ -77,6 +80,9 @@ class CMakeBuild(build_ext):
             warnings.warn("Building times of 'pyg-lib' can be heavily improved"
                           " by installing 'ninja': `pip install ninja`")
 
+        if os.getenv("PYG_CMAKE_ARGS") is not None:
+            cmake_args += os.getenv("PYG_CMAKE_ARGS").split(" ")
+
         build_args = []
 
         subprocess.check_call(['cmake', ext.sourcedir] + cmake_args,
